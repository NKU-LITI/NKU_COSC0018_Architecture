#include "cache.h"
#include "spp_dev.h"

SIGNATURE_TABLE ST;// 签名表定义
PATTERN_TABLE   PT;// 模式表定义
PREFETCH_FILTER FILTER;// 预取过滤器定义
GLOBAL_REGISTER GHR;// 全局寄存器定义


void CACHE::l2c_prefetcher_initialize() 
{

}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
    // 从地址中提取页面和页面偏移信息
    uint64_t page = addr >> LOG2_PAGE_SIZE;
    uint32_t page_offset = (addr >> LOG2_BLOCK_SIZE) & (PAGE_SIZE / BLOCK_SIZE - 1),
             last_sig = 0,
             curr_sig = 0,
             confidence_q[L2C_MSHR_SIZE],
             depth = 0;

    int32_t  delta = 0,
             delta_q[L2C_MSHR_SIZE];

    // 初始化置信度和增量队列
    for (uint32_t i = 0; i < L2C_MSHR_SIZE; i++){
        confidence_q[i] = 0;
        delta_q[i] = 0;
    }

    // 初始化置信度队列的第一个条目
    confidence_q[0] = 100;
    
    // 更新全局历史寄存器的准确性信息
    GHR.global_accuracy = GHR.pf_issued ? ((100 * GHR.pf_useful) / GHR.pf_issued)  : 0;
    
    // 调试打印语句
    SPP_DP (
        cout << endl << "[ChampSim] " << __func__ << " addr: " << hex << addr << " cache_line: " << (addr >> LOG2_BLOCK_SIZE);
        cout << " page: " << page << " page_offset: " << dec << page_offset << endl;
    );

    // 阶段 1: 读取并更新存储在ST中的签名
    // last_sig 和 delta 用于在PT中更新(sig, delta)相关性
    // curr_sig 用于在PT中读取预取候选项
    ST.read_and_update_sig(page, page_offset, last_sig, curr_sig, delta);

    // 与此同时，检查预取过滤器以更新全局准确性计数器
    FILTER.check(addr, L2C_DEMAND); 

    // 阶段 2: 更新存储在PT中的增量模式
    if (last_sig) PT.update_pattern(last_sig, delta);

    // 阶段 3: 开始预取
    uint64_t base_addr = addr;
    uint32_t lookahead_conf = 100,
             pf_q_head = 0, 
             pf_q_tail = 0;
    uint8_t  do_lookahead = 0;

    // 预取展望循环
#ifdef LOOKAHEAD_ON
    do {
#endif
        uint32_t lookahead_way = PT_WAY;
        PT.read_pattern(curr_sig, delta_q, confidence_q, lookahead_way, lookahead_conf, pf_q_tail, depth);

        do_lookahead = 0;
        for (uint32_t i = pf_q_head; i < pf_q_tail; i++) {
            if (confidence_q[i] >= PF_THRESHOLD) {
                uint64_t pf_addr = (base_addr & ~(BLOCK_SIZE - 1)) + (delta_q[i] << LOG2_BLOCK_SIZE);

                // 检查预取请求是否在同一页内
                if ((addr & ~(PAGE_SIZE - 1)) == (pf_addr & ~(PAGE_SIZE - 1))) { 
                    // 预取请求在同一页内
                    if (FILTER.check(pf_addr, ((confidence_q[i] >= FILL_THRESHOLD) ? SPP_L2C_PREFETCH : SPP_LLC_PREFETCH))) {
                        // 发送预取请求
                        prefetch_line(ip, addr, pf_addr, ((confidence_q[i] >= FILL_THRESHOLD) ? FILL_L2 : FILL_LLC), 0); // 使用 addr (而不是 base_addr) 以遵守相同的物理页面边界

                        // 更新全局历史寄存器预取统计信息
                        if (confidence_q[i] >= FILL_THRESHOLD) {
                            GHR.pf_issued++;
                            if (GHR.pf_issued > GLOBAL_COUNTER_MAX) {
                                GHR.pf_issued >>= 1;
                                GHR.pf_useful >>= 1;
                            }
                            SPP_DP (cout << "[ChampSim] SPP L2 prefetch issued GHR.pf_issued: " << GHR.pf_issued << " GHR.pf_useful: " << GHR.pf_useful << endl;);
                        }

                        // 调试打印预取信息
                        SPP_DP (
                            cout << "[ChampSim] " << __func__ << " base_addr: " << hex << base_addr << " pf_addr: " << pf_addr;
                            cout << " pf_cache_line: " << (pf_addr >> LOG2_BLOCK_SIZE);
                            cout << " prefetch_delta: " << dec << delta_q[i] << " confidence: " << confidence_q[i];
                            cout << " depth: " << i << " fill_level: " << ((confidence_q[i] >= FILL_THRESHOLD) ? FILL_L2 : FILL_LLC) << endl;
                        );
                    }
                } else { // 预取请求跨越物理页面边界
#ifdef GHR_ON
                    // 在GHR中存储此预取请求，以在看到ST未命中时引导SPP学习（即访问新页面）
                    GHR.update_entry(curr_sig, confidence_q[i], (pf_addr >> LOG2_BLOCK_SIZE) & 0x3F, delta_q[i]); 
#endif
                }

                do_lookahead = 1;
                pf_q_head++;
            }
        }

        // 更新 base_addr 和 curr_sig
        if (lookahead_way < PT_WAY) {
            uint32_t set = get_hash(curr_sig) % PT_SET;
            base_addr += (PT.delta[set][lookahead_way] << LOG2_BLOCK_SIZE);

            // PT.delta 使用 7 位的符号幅度表示生成 sig_delta
            // int sig_delta = (PT.delta[set][lookahead_way] < 0) ? ((((-1) * PT.delta[set][lookahead_way]) & 0x3F) + 0x40) : PT.delta[set][lookahead_way];
            int sig_delta = (PT.delta[set][lookahead_way] < 0) ? (((-1) * PT.delta[set][lookahead_way]) + (1 << (SIG_DELTA_BIT - 1))) : PT.delta[set][lookahead_way];
            curr_sig = ((curr_sig << SIG_SHIFT) ^ sig_delta) & SIG_MASK;
        }

        // 调试打印循环信息

        SPP_DP (
            cout << "Looping curr_sig: " << hex << curr_sig << " base_addr: " << base_addr << dec;
            cout << " pf_q_head: " << pf_q_head << " pf_q_tail: " << pf_q_tail << " depth: " << depth << endl;
        );
#ifdef LOOKAHEAD_ON
    } while (do_lookahead);
#endif

    return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t match, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
#ifdef FILTER_ON
    SPP_DP (cout << endl;);
    FILTER.check(evicted_addr, L2C_EVICT);
#endif

    return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{

}

// 使用 Robert Jenkins' 的32位混合函数和 Knuth's 乘法法则生成64位哈希值
// 参数：key - 待哈希的64位整数；返回值：64位哈希值
uint64_t get_hash(uint64_t key)
{
    // Robert Jenkins' 32位混合函数
    key += (key << 12);
    key ^= (key >> 22);
    key += (key << 4);
    key ^= (key >> 9);
    key += (key << 10);
    key ^= (key >> 2);
    key += (key << 7);
    key ^= (key >> 12);

    // Knuth's 乘法法则
    key = (key >> 3) * 2654435761;

    return key;
}

// 函数功能：读取和更新签名表中的签名
// 参数：page - 物理页号，page_offset - 页内偏移，last_sig - 上一次的签名，curr_sig - 当前签名，delta - 地址偏移
// 输出：last_sig、curr_sig、delta 被更新
void SIGNATURE_TABLE::read_and_update_sig(uint64_t page, uint32_t page_offset, uint32_t &last_sig, uint32_t &curr_sig, int32_t &delta)
{
    uint32_t set = get_hash(page) % ST_SET,
             match = ST_WAY,
             partial_page = page & ST_TAG_MASK;
    uint8_t  ST_hit = 0;
    int      sig_delta = 0;

    // 调试输出
    SPP_DP (cout << "[ST] " << __func__ << " page: " << hex << page << " partial_page: " << partial_page << dec << endl;);

    // Case 1: 命中
    for (match = 0; match < ST_WAY; match++) {
        if (valid[set][match] && (tag[set][match] == partial_page)) {
            last_sig = sig[set][match];
            delta = page_offset - last_offset[set][match];

            if (delta) {
                // 使用7位符号幅值表示形式构建新的签名
                sig_delta = (delta < 0) ? (((-1) * delta) + (1 << (SIG_DELTA_BIT - 1))) : delta;
                sig[set][match] = ((last_sig << SIG_SHIFT) ^ sig_delta) & SIG_MASK;
                curr_sig = sig[set][match];
                last_offset[set][match] = page_offset;

                // 调试输出
                SPP_DP (
                    cout << "[ST] " << __func__ << " hit set: " << set << " way: " << match;
                    cout << " valid: " << valid[set][match] << " tag: " << hex << tag[set][match];
                    cout << " last_sig: " << last_sig << " curr_sig: " << curr_sig;
                    cout << " delta: " << dec << delta << " last_offset: " << page_offset << endl;
                );
            } else last_sig = 0; // 同一缓存行，地址偏移为零

            ST_hit = 1;
            break;
        }
    }

    // Case 2: 无效
    if (match == ST_WAY) {
        for (match = 0; match < ST_WAY; match++) {
            if (valid[set][match] == 0) {
                valid[set][match] = 1;
                tag[set][match] = partial_page;
                sig[set][match] = 0;
                curr_sig = sig[set][match];
                last_offset[set][match] = page_offset;

                // 调试输出
                SPP_DP (
                    cout << "[ST] " << __func__ << " invalid set: " << set << " way: " << match;
                    cout << " valid: " << valid[set][match] << " tag: " << hex << partial_page;
                    cout << " sig: " << sig[set][match] << " last_offset: " << dec << page_offset << endl;
                );

                break;
            }
        }
    }

    // Case 3: 未命中
    if (match == ST_WAY) {
        for (match = 0; match < ST_WAY; match++) {
            if (lru[set][match] == ST_WAY - 1) { // 找到替换的受害者
                tag[set][match] = partial_page;
                sig[set][match] = 0;
                curr_sig = sig[set][match];
                last_offset[set][match] = page_offset;

                // 调试输出
                SPP_DP (
                    cout << "[ST] " << __func__ << " miss set: " << set << " way: " << match;
                    cout << " valid: " << valid[set][match] << " victim tag: " << hex << tag[set][match] << " new tag: " << partial_page;
                    cout << " sig: " << sig[set][match] << " last_offset: " << dec << page_offset << endl;
                );

                break;
            }
        }

        #ifdef SPP_SANITY_CHECK
        // 断言
        if (match == ST_WAY) {
            cout << "[ST] Cannot find a replacement victim!" << endl;
            assert(0);
        }
        #endif
    }

#ifdef GHR_ON
    if (ST_hit == 0) {
        uint32_t GHR_found = GHR.check_entry(page_offset);
        if (GHR_found < MAX_GHR_ENTRY) {
            sig_delta = (GHR.delta[GHR_found] < 0) ? (((-1) * GHR.delta[GHR_found]) + (1 << (SIG_DELTA_BIT - 1))) : GHR.delta[GHR_found];
            sig[set][match] = ((GHR.sig[GHR_found] << SIG_SHIFT) ^ sig_delta) & SIG_MASK;
            curr_sig = sig[set][match];
        }
    }
#endif

    // 更新LRU
    for (uint32_t way = 0; way < ST_WAY; way++) {
        if (lru[set][way] < lru[set][match]) {
            lru[set][way]++;

            #ifdef SPP_SANITY_CHECK
            // 断言
            if (lru[set][way] >= ST_WAY) {
                cout << "[ST] LRU value is wrong! set: " << set << " way: " << way << " lru: " << lru[set][way] << endl;
                assert(0);
            }
            #endif
        }
    }
    lru[set][match] = 0; // 提升至MRU位置
}

// 更新（sig，delta）相关性
void PATTERN_TABLE::update_pattern(uint32_t last_sig, int curr_delta)
{
    uint32_t set = get_hash(last_sig) % PT_SET;// 使用哈希函数计算集合索引
    uint32_t match = 0;// 用于跟踪集合中匹配的条目的变量

    // case1：命中
    for (match = 0; match < PT_WAY; match++) {
        // 检查当前delta是否与现有条目匹配
        if (delta[set][match] == curr_delta) {
            c_delta[set][match]++;// 增加命中计数器
            c_sig[set]++;

            // 检查计数器是否超过最大值，如果需要则进行老化
            if (c_sig[set] > C_SIG_MAX) {
                for (uint32_t way = 0; way < PT_WAY; way++)
                    c_delta[set][way] >>= 1;
                c_sig[set] >>= 1;
            }

            SPP_DP (
                cout << "[PT] " << __func__ << " 命中 sig：" << hex << last_sig << dec << " 集合：" << set << " 路：" << match;
                cout << " delta：" << delta[set][match] << " c_delta：" << c_delta[set][match] << " c_sig：" << c_sig[set] << endl;
            );

            // 退出循环，因为我们找到了匹配项
            break;
        }
    }

    // case2：未命中
    if (match == PT_WAY) {
        // 用于跟踪替换信息的变量
        uint32_t victim_way = PT_WAY;
        uint32_t min_counter = C_SIG_MAX;

        // 查找要替换的具有最小c_delta的条目
        for (match = 0; match < PT_WAY; match++) {
            if (c_delta[set][match] < min_counter) {
                victim_way = match;
                min_counter = c_delta[set][match];
            }
        }

        // 使用新的delta更新条目并重置计数器
        delta[set][victim_way] = curr_delta;
        c_delta[set][victim_way] = 0;
        c_sig[set]++;

        // 如果计数器超过最大值，则进行老化
        if (c_sig[set] > C_SIG_MAX) {
            for (uint32_t way = 0; way < PT_WAY; way++)
                c_delta[set][way] >>= 1;
            c_sig[set] >>= 1;
        }

        // 未命中情况的调试/打印信息
        SPP_DP (
            cout << "[PT] " << __func__ << " 未命中 sig：" << hex << last_sig << dec << " 集合：" << set << " 路：" << victim_way;
            cout << " delta：" << delta[set][victim_way] << " c_delta：" << c_delta[set][victim_way] << " c_sig：" << c_sig[set] << endl;
        );

        // 安全检查：确保找到替代的受害者
        #ifdef SPP_SANITY_CHECK
        if (victim_way == PT_WAY) {
            cout << "[PT] 找不到替代受害者！" << endl;
            assert(0);
        }
        #endif
    }
}


void PATTERN_TABLE::read_pattern(uint32_t curr_sig, int *delta_q, uint32_t *confidence_q, uint32_t &lookahead_way, uint32_t &lookahead_conf, uint32_t &pf_q_tail, uint32_t &depth)
{
    // 更新（sig，delta）相关性
    uint32_t set = get_hash(curr_sig) % PT_SET,
             local_conf = 0,
             pf_conf = 0,
             max_conf = 0;

    // 如果集合中有条目
    if (c_sig[set]) {
        for (uint32_t way = 0; way < PT_WAY; way++) {
            // 计算本地置信度和路径置信度
            local_conf = (100 * c_delta[set][way]) / c_sig[set];
            pf_conf = depth ? (GHR.global_accuracy * c_delta[set][way] / c_sig[set] * lookahead_conf / 100) : local_conf;

            // 如果路径置信度高于阈值
            if (pf_conf >= PF_THRESHOLD) {
                // 将信息添加到队列中
                confidence_q[pf_q_tail] = pf_conf;
                delta_q[pf_q_tail] = delta[set][way];

                // 预测的路径跟随最有信心的条目
                if (pf_conf > max_conf) {
                    lookahead_way = way;
                    max_conf = pf_conf;
                }
                pf_q_tail++;

                SPP_DP (
                    cout << "[PT] " << __func__ << " 高置信度：" << pf_conf << " sig：" << hex << curr_sig << dec << " 集合：" << set << " 路：" << way;
                    cout << " delta：" << delta[set][way] << " c_delta：" << c_delta[set][way] << " c_sig：" << c_sig[set];
                    cout << " conf：" << local_conf << " depth：" << depth << endl;
                );
            } else {
                SPP_DP (
                    cout << "[PT] " << __func__ << " 低置信度：" << pf_conf << " sig：" << hex << curr_sig << dec << " 集合：" << set << " 路：" << way;
                    cout << " delta：" << delta[set][way] << " c_delta：" << c_delta[set][way] << " c_sig：" << c_sig[set];
                    cout << " conf：" << local_conf << " depth：" << depth << endl;
                );
            }
        }

        // 更新预测路径的置信度和深度
        lookahead_conf = max_conf;
        if (lookahead_conf >= PF_THRESHOLD) depth++;

        SPP_DP (cout << "global_accuracy：" << GHR.global_accuracy << " lookahead_conf：" << lookahead_conf << endl;);
    } else {
        // 如果集合中没有条目，则将置信度队列中的值置为零
        confidence_q[pf_q_tail] = 0;
    }
}


bool PREFETCH_FILTER::check(uint64_t check_addr, FILTER_REQUEST filter_request)
{
    uint64_t cache_line = check_addr >> LOG2_BLOCK_SIZE,
             hash = get_hash(cache_line),
             quotient = (hash >> REMAINDER_BIT) & ((1 << QUOTIENT_BIT) - 1),
             remainder = hash % (1 << REMAINDER_BIT);

    SPP_DP (
        cout << "[FILTER] check_addr: " << hex << check_addr << " check_cache_line: " << (check_addr >> LOG2_BLOCK_SIZE);
        cout << " hash: " << hash << dec << " quotient: " << quotient << " remainder: " << remainder << endl;
    );

    switch (filter_request) {
        case SPP_L2C_PREFETCH:
            if ((valid[quotient] || useful[quotient]) && remainder_tag[quotient] == remainder) { 
                SPP_DP (
                    cout << "[FILTER] " << __func__ << " line is already in the filter check_addr: " << hex << check_addr << " cache_line: " << cache_line << dec;
                    cout << " quotient: " << quotient << " valid: " << valid[quotient] << " useful: " << useful[quotient] << endl; 
                );

                return false; // False return indicates "Do not prefetch"
            } else {
                valid[quotient] = 1;  // Mark as prefetched
                useful[quotient] = 0; // Reset useful bit
                remainder_tag[quotient] = remainder;

                SPP_DP (
                    cout << "[FILTER] " << __func__ << " set valid for check_addr: " << hex << check_addr << " cache_line: " << cache_line << dec;
                    cout << " quotient: " << quotient << " remainder_tag: " << remainder_tag[quotient] << " valid: " << valid[quotient] << " useful: " << useful[quotient] << endl; 
                );
            }
            break;

        case SPP_LLC_PREFETCH:
            if ((valid[quotient] || useful[quotient]) && remainder_tag[quotient] == remainder) { 
                SPP_DP (
                    cout << "[FILTER] " << __func__ << " line is already in the filter check_addr: " << hex << check_addr << " cache_line: " << cache_line << dec;
                    cout << " quotient: " << quotient << " valid: " << valid[quotient] << " useful: " << useful[quotient] << endl; 
                );

                return false; // False return indicates "Do not prefetch"
            } else {
                // NOTE: SPP_LLC_PREFETCH has relatively low confidence (FILL_THRESHOLD <= SPP_LLC_PREFETCH < PF_THRESHOLD) 
                // Therefore, it is safe to prefetch this cache line in the large LLC and save precious L2C capacity
                // If this prefetch request becomes more confident and SPP eventually issues SPP_L2C_PREFETCH,
                // we can get this cache line immediately from the LLC (not from DRAM)
                // To allow this fast prefetch from LLC, SPP does not set the valid bit for SPP_LLC_PREFETCH

                //valid[quotient] = 1;
                //useful[quotient] = 0;

                SPP_DP (
                    cout << "[FILTER] " << __func__ << " don't set valid for check_addr: " << hex << check_addr << " cache_line: " << cache_line << dec;
                    cout << " quotient: " << quotient << " valid: " << valid[quotient] << " useful: " << useful[quotient] << endl; 
                );
            }
            break;

        case L2C_DEMAND:
            if ((remainder_tag[quotient] == remainder) && (useful[quotient] == 0)) {
                useful[quotient] = 1;
                if (valid[quotient]) GHR.pf_useful++; // This cache line was prefetched by SPP and actually used in the program

                SPP_DP (
                    cout << "[FILTER] " << __func__ << " set useful for check_addr: " << hex << check_addr << " cache_line: " << cache_line << dec;
                    cout << " quotient: " << quotient << " valid: " << valid[quotient] << " useful: " << useful[quotient];
                    cout << " GHR.pf_issued: " << GHR.pf_issued << " GHR.pf_useful: " << GHR.pf_useful << endl; 
                );
            }
            break;

        case L2C_EVICT:
            // Decrease global pf_useful counter when there is a useless prefetch (prefetched but not used)
            if (valid[quotient] && !useful[quotient] && GHR.pf_useful) GHR.pf_useful--;

            // Reset filter entry
            valid[quotient] = 0;
            useful[quotient] = 0;
            remainder_tag[quotient] = 0;
            break;

        default:
            // Assertion
            cout << "[FILTER] Invalid filter request type: " << filter_request << endl;
            assert(0);
    }

    return true;
}

void GLOBAL_REGISTER::update_entry(uint32_t pf_sig, uint32_t pf_confidence, uint32_t pf_offset, int pf_delta)
{
    // 这里GHR的实现与原论文略有不同
    // GHR不是匹配（last_offset + delta），而是简单地存储和匹配pf_offset
    uint32_t min_conf = 100,
             victim_way = MAX_GHR_ENTRY;

    SPP_DP (
        cout << "[GHR] 跨越页面边界 pf_sig: " << hex << pf_sig << dec;
        cout << " confidence: " << pf_confidence << " pf_offset: " << pf_offset << " pf_delta: " << pf_delta << endl;
    );

    // 遍历所有的GHR条目
    for (uint32_t i = 0; i < MAX_GHR_ENTRY; i++) {
        // 如果GHR已经存储相同的pf_sig，则更新GHR条目为最新信息
        if (valid[i] && (offset[i] == pf_offset)) {
            sig[i] = pf_sig;
            confidence[i] = pf_confidence;
            delta[i] = pf_delta;

            SPP_DP (cout << "[GHR] 找到匹配的索引: " << i << endl;);

            return;
        }

        // GHR替换策略基于存储的confidence值
        // 选择具有最低confidence的条目作为受害者
        if (confidence[i] < min_conf) {
            min_conf = confidence[i];
            victim_way = i;
        }
    }

    // 如果没有找到替代的受害者，则输出错误信息
    if (victim_way >= MAX_GHR_ENTRY) {
        cout << "[GHR] 找不到替代受害者！" << endl;
        assert(0);
    }

    SPP_DP (
        cout << "[GHR] 替代索引: " << victim_way << " pf_sig: " << hex << sig[victim_way] << dec;
        cout << " confidence: " << confidence[victim_way] << " pf_offset: " << offset[victim_way] << " pf_delta: " << delta[victim_way] << endl;
    );

    // 更新GHR条目为新的信息
    valid[victim_way] = 1;
    sig[victim_way] = pf_sig;
    confidence[victim_way] = pf_confidence;
    offset[victim_way] = pf_offset;
    delta[victim_way] = pf_delta;
}


// check
uint32_t GLOBAL_REGISTER::check_entry(uint32_t page_offset)
{
    uint32_t max_conf = 0,
             max_conf_way = MAX_GHR_ENTRY;

    for (uint32_t i = 0; i < MAX_GHR_ENTRY; i++) {
        if ((offset[i] == page_offset) && (max_conf < confidence[i])) {
            max_conf = confidence[i];
            max_conf_way = i;
        }
    }

    return max_conf_way;
}
